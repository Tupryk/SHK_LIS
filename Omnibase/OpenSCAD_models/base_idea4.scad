// Generated by SolidPython 1.1.3 on 2024-01-24 16:56:36
$fn = 48;


union() {
	rotate(a = [0, 0, 60]) {
		union() {
			color(alpha = 1.0000000000, c = "Red") {
				translate(v = [0.   ,0.272,0.   ]) {
					rotate(a = [0, 0, -0.0000000000]) {
						cube(center = true, size = [0.41547005383792507, 0.0200000000, 0.0400000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Orange") {
				translate(v = [0.   ,0.362,0.   ]) {
					rotate(a = [0, 0, -0.0000000000]) {
						cube(center = true, size = [0.3000000000, 0.0200000000, 0.0400000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Green") {
				translate(v = [ 0.   , 0.317,-0.04 ]) {
					rotate(a = [90, 0, -0.0000000000]) {
						cylinder(center = true, h = 0.0500000000, r = 0.0600000000);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Purple") {
				translate(v = [0.27358073,0.15795191,0.        ]) {
					rotate(a = [0, 0, -60.0000000000]) {
						cube(center = true, size = [0.4596818842642447, 0.0200000000, 0.0400000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Red") {
				translate(v = [ 0.23555891,-0.136     , 0.        ]) {
					rotate(a = [0, 0, -120.0000000000]) {
						cube(center = true, size = [0.41547005383792507, 0.0200000000, 0.0400000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Orange") {
				translate(v = [ 0.3135012,-0.181    , 0.       ]) {
					rotate(a = [0, 0, -120.0000000000]) {
						cube(center = true, size = [0.3000000000, 0.0200000000, 0.0400000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Green") {
				translate(v = [ 0.27453005,-0.1585    ,-0.04      ]) {
					rotate(a = [90, 0, -120.0000000000]) {
						cylinder(center = true, h = 0.0500000000, r = 0.0600000000);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Purple") {
				translate(v = [ 3.86870590e-17,-3.15903811e-01, 0.00000000e+00]) {
					rotate(a = [0, 0, -180.0000000000]) {
						cube(center = true, size = [0.4596818842642447, 0.0200000000, 0.0400000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Red") {
				translate(v = [-0.23555891,-0.136     , 0.        ]) {
					rotate(a = [0, 0, -240.0000000000]) {
						cube(center = true, size = [0.41547005383792507, 0.0200000000, 0.0400000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Orange") {
				translate(v = [-0.3135012,-0.181    , 0.       ]) {
					rotate(a = [0, 0, -240.0000000000]) {
						cube(center = true, size = [0.3000000000, 0.0200000000, 0.0400000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Green") {
				translate(v = [-0.27453005,-0.1585    ,-0.04      ]) {
					rotate(a = [90, 0, -240.0000000000]) {
						cylinder(center = true, h = 0.0500000000, r = 0.0600000000);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Purple") {
				translate(v = [-0.27358073, 0.15795191, 0.        ]) {
					rotate(a = [0, 0, -300.0000000000]) {
						cube(center = true, size = [0.4596818842642447, 0.0200000000, 0.0400000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Blue") {
				translate(v = [-0.0850000000, -0.0200000000, 0.0100000000]) {
					rotate(a = [0, 0, -90]) {
						cube(center = true, size = [0.5680000000, 0.0200000000, 0.0200000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Blue") {
				translate(v = [0.0850000000, -0.0200000000, 0.0100000000]) {
					rotate(a = [0, 0, -90]) {
						cube(center = true, size = [0.5680000000, 0.0200000000, 0.0200000000]);
					}
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Blue") {
				translate(v = [0, 0.1000000000, -0.0100000000]) {
					cube(center = true, size = [0.6000000000, 0.0200000000, 0.0200000000]);
				}
			}
		}
		union() {
			color(alpha = 1.0000000000, c = "Yellow") {
				translate(v = [0.2000000000, 0.2250000000, 0.1200000000]) {
					rotate(a = [0, 0, -60]) {
						cube(center = true, size = [0.1800000000, 0.1350000000, 0.2000000000]);
					}
				}
			}
		}
		translate(v = [0, -0.0700000000, 0.0650000000]) {
			union() {
				color(alpha = 1.0000000000, c = "Yellow") {
					cube(center = true, size = [0.4450000000, 0.3575000000, 0.0900000000]);
				}
				color(alpha = 1.0000000000, c = "Blue") {
					translate(v = [0, 0.1687500000, 0.0550000000]) {
						cube(center = true, size = [0.5250000000, 0.0200000000, 0.0200000000]);
					}
				}
				color(alpha = 1.0000000000, c = "Blue") {
					translate(v = [0.2325000000, 0.1687500000, -0.0100000000]) {
						cube(center = true, size = [0.0200000000, 0.0200000000, 0.1100000000]);
					}
				}
				color(alpha = 1.0000000000, c = "Blue") {
					translate(v = [-0.2325000000, 0.1687500000, -0.0100000000]) {
						cube(center = true, size = [0.0200000000, 0.0200000000, 0.1100000000]);
					}
				}
				color(alpha = 1.0000000000, c = "Blue") {
					translate(v = [0.0850000000, -0.1887500000, 0]) {
						cube(center = true, size = [0.0200000000, 0.0200000000, 0.0900000000]);
					}
				}
				color(alpha = 1.0000000000, c = "Blue") {
					translate(v = [-0.0850000000, -0.1887500000, 0]) {
						cube(center = true, size = [0.0200000000, 0.0200000000, 0.0900000000]);
					}
				}
				color(alpha = 1.0000000000, c = "Blue") {
					translate(v = [0.0850000000, -0.0300000000, 0.0550000000]) {
						cube(center = true, size = [0.0200000000, 0.3775000000, 0.0200000000]);
					}
				}
				color(alpha = 1.0000000000, c = "Blue") {
					translate(v = [-0.0850000000, -0.0300000000, 0.0550000000]) {
						cube(center = true, size = [0.0200000000, 0.3775000000, 0.0200000000]);
					}
				}
			}
		}
		translate(v = [-0.0550000000, 0.1950000000, 0.0800000000]) {
			union() {
				color(alpha = 1.0000000000, c = "Green") {
					translate(v = [-0.0400000000, 0, 0]) {
						cube(center = true, size = [0.2600000000, 0.1350000000, 0.0800000000]);
					}
				}
				color(alpha = 1.0000000000, c = "Blue") {
					translate(v = [-0.0200000000, -0.0150000000, -0.0500000000]) {
						cube(center = true, size = [0.3400000000, 0.0200000000, 0.0200000000]);
					}
				}
				color(alpha = 1.0000000000, c = "Blue") {
					translate(v = [-0.0200000000, 0.0150000000, -0.0500000000]) {
						cube(center = true, size = [0.3400000000, 0.0200000000, 0.0200000000]);
					}
				}
			}
		}
		translate(v = [0, -0.1787500000, 0.1500000000]) {
			color(alpha = 1.0000000000, c = "Orange") {
				cube(center = true, size = [0.2100000000, 0.2100000000, 0.0400000000]);
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#! /usr/bin/env python3
import sys
import numpy as np
from solid import scad_render_to_file
from solid.objects import cube, translate, union, rotate, color, cylinder
from armComponents import controlBox, powerInverter, robotBase

SEGMENTS = 48

radial_vector0 = np.array([31., -19., 0.])
radial_vector0 /= np.linalg.norm(radial_vector0)
radial_vector1 = np.array([-31., -19., 0.])
radial_vector1 /= np.linalg.norm(radial_vector1)

side_count = 3
step_angle = 360/side_count
step_angle_rad = np.deg2rad(step_angle)
rad_size = .3  # Length from center to outer wheel
piece_width = .02  # cm
hpw = piece_width*.5

wheel_gap = .09
ctiw = .352  # Center to inner wheel support
ctow = ctiw-wheel_gap  # Center to outer wheel support
wsl = .3  # Wheel support length

p1 = np.array([wsl*.5, ctiw, 0.])
p2 = np.array([np.sin(step_angle_rad), np.cos(step_angle_rad), 0.]) * ctiw - \
    np.array([np.sin(step_angle_rad+np.pi*.5),
             np.cos(step_angle_rad+np.pi*.5), 0.]) * wsl*.5
boll = np.linalg.norm(p1-p2)  # Big outer lines length
bolr = np.linalg.norm((p1+p2)*.5)  # Big outer lines rad length

# Inner inner wheel support
iiwsl = wsl+((wheel_gap+piece_width*.5) *
             np.tan((side_count*2-2)*np.pi/(side_count*2)-np.pi*.5))*2
print(iiwsl)


def rotate_vec(vec, angle):
    angle = np.deg2rad(angle)
    new_vec = np.copy(vec)
    new_vec[0] = vec[0] * np.cos(angle) - vec[1] * np.sin(angle)
    new_vec[1] = vec[0] * np.sin(angle) + vec[1] * np.cos(angle)
    return new_vec


def basic_geometry():

    shapes = []
    for i in range(side_count):
        dir_vector = np.array(
            [np.sin(i*step_angle_rad), np.cos(i*step_angle_rad), 0.])
        rot = -step_angle*i
        outer_wheel_support = union()(
            color("Red")(
                translate(dir_vector*(ctow+hpw))(
                    rotate((0, 0, rot))(
                        cube([iiwsl, piece_width, piece_width*2], center=True)))))
        shapes.append(outer_wheel_support)
        inner_wheel_support = union()(
            color("Orange")(
                translate(dir_vector*(ctiw+hpw))(
                    rotate((0, 0, rot))(
                        cube([wsl, piece_width, piece_width*2], center=True)))))
        shapes.append(inner_wheel_support)

        # Wheels
        wheel_pos = ((dir_vector*(ctow+hpw))+(dir_vector*(ctiw+hpw)))*.5
        wheel_pos[2] -= .04
        wheel = union()(
            color("Green")(
                translate(wheel_pos)(
                    rotate((90, 0, rot))(
                        cylinder(r=.06, h=.05, center=True)))))
        shapes.append(wheel)

        dir_vector = np.array([np.sin(i*step_angle_rad+step_angle_rad*.5),
                              np.cos(i*step_angle_rad+step_angle_rad*.5), 0.])
        rot -= step_angle*.5
        big_outer_line = union()(
            color("Purple")(
                translate(dir_vector*(bolr+hpw))(
                    rotate((0, 0, rot))(
                        cube([boll, piece_width, piece_width*2], center=True)))))
        shapes.append(big_outer_line)

    vertical_bar1 = union()(
        color("Blue")(
            translate([-.085, -.02, .01])(
                rotate((0, 0, -90))(
                    cube([.568, piece_width, piece_width], center=True)))))
    shapes.append(vertical_bar1)

    vertical_bar2 = union()(
        color("Blue")(
            translate([.085, -.02, .01])(
                rotate((0, 0, -90))(
                    cube([.568, piece_width, piece_width], center=True)))))
    shapes.append(vertical_bar2)

    horizontal_bar = union()(
        color("Blue")(
            translate([0, .1, -.01])(
                cube([.6, piece_width, piece_width], center=True))))
    shapes.append(horizontal_bar)

    battery_pack = union()(
        color("Yellow")(
            translate([.12+.08, .1+.125, .1+.02])(
                rotate((0, 0, -60))(
                    cube([.18, .135, .2], center=True)))))
    shapes.append(battery_pack)

    """
    print(f"Red:         {wsl:.1f} cm")
    print(f"Orange:      {wsl:.1f} cm")
    print(f"Yellow:      {cil:.1f} cm - angle cut")
    print(f"Green:       {rcl:.1f} cm")
    print(f"Blue:         {wssl:.1f} cm")
    print(f"Purple:      {boll:.1f} cm")
    print("--------------------------")
    print(f"Diameter:   {(np.linalg.norm(np.array([wsl*.5, ctow]))*2):.1f} cm")
    """

    control_box = controlBox()
    control_box = translate([0, -.07, .02+.045])(control_box)
    shapes.append(control_box)

    power_inverter = powerInverter()
    power_inverter = translate([-.055, .195, .02+.06])(power_inverter)
    shapes.append(power_inverter)

    robot_base = robotBase()
    robot_base = translate([0, -.3575*.5, .045+.04 + .02+.045])(robot_base)
    shapes.append(robot_base)

    print(f"Orange:      {(wsl*100):.1f} cm")
    print(f"Purple:      {(boll*100):.1f} cm")
    print(f"Red:         {(iiwsl*100):.1f} cm")

    return union()(rotate([0, 0, 60])(*shapes))


if __name__ == '__main__':
    out_dir = sys.argv[1] if len(sys.argv) > 1 else None

    a = basic_geometry()

    # Adding the file_header argument as shown allows you to change
    # the detail of arcs by changing the SEGMENTS variable.  This can
    # be expensive when making lots of small curves, but is otherwise
    # useful.
    file_out = scad_render_to_file(
        a, out_dir=out_dir, file_header=f'$fn = {SEGMENTS};')
    print(f"{__file__}: SCAD file written to: \n{file_out}")
 
 
************************************************/
